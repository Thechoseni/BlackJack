{"version":3,"sources":["BoardLayer.js"],"names":["cc","Class","extends","Component","properties","coin1","Node","coin2","coin3","coin4","computer","player","cardPrefab","Prefab","computerCardSum","Integer","onLoad","start","vv","creatOtherCard","hideChip","initCard","runAction","moveTo","v2","initNumber","i","creatComputerCard","creatPlayerCard","computerCardRow","winSize","width","computerCardRotation","playerCardRow","playerCardRotation","creatCardNumber","number","Math","random","count","card","length","push","cardNumber","computerCardNumber","poke","instantiate","getComponent","init","computerCard","getChildByName","active","addChild","playerCardNumber","playerCard"],"mappings":";;;;;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,eAAOL,GAAGM,IADF;AAERC,eAAOP,GAAGM,IAFF;AAGRE,eAAOR,GAAGM,IAHF;AAIRG,eAAOT,GAAGM,IAJF;AAKRI,kBAAUV,GAAGM,IALL;AAMRK,gBAAQX,GAAGM,IANH;AAORM,oBAAYZ,GAAGa,MAPP;AAQRC,yBAAiBd,GAAGe;AARZ,KAHP;;AAcL;;AAEAC,UAhBK,oBAgBI;AACL;AACH,KAlBI;AAoBLC,SApBK,mBAoBG;AACJjB,WAAGkB,EAAH,CAAMC,cAAN,GAAuB,IAAvB;AACA;AACA,aAAKC,QAAL;AACA,aAAKC,QAAL;AACH,KAzBI;;;AA2BL;AACA;AACAD,YA7BK,sBA6BM;AACP,aAAKf,KAAL,CAAWiB,SAAX,CAAqBtB,GAAGuB,MAAH,CAAU,GAAV,EAAevB,GAAGwB,EAAH,CAAM,CAAN,EAAS,CAAC,GAAV,CAAf,CAArB;AACA,aAAKjB,KAAL,CAAWe,SAAX,CAAqBtB,GAAGuB,MAAH,CAAU,GAAV,EAAevB,GAAGwB,EAAH,CAAM,CAAN,EAAS,CAAC,GAAV,CAAf,CAArB;AACA,aAAKhB,KAAL,CAAWc,SAAX,CAAqBtB,GAAGuB,MAAH,CAAU,GAAV,EAAevB,GAAGwB,EAAH,CAAM,CAAN,EAAS,CAAC,GAAV,CAAf,CAArB;AACA,aAAKf,KAAL,CAAWa,SAAX,CAAqBtB,GAAGuB,MAAH,CAAU,GAAV,EAAevB,GAAGwB,EAAH,CAAM,CAAN,EAAS,CAAC,GAAV,CAAf,CAArB;AACH,KAlCI;;AAmCL;AACAH,YApCK,sBAoCM;AACP,aAAKI,UAAL;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxB,iBAAKC,iBAAL;AACA,iBAAKC,eAAL;AACH;AACD;AACA;AACH,KA5CI;AA6CLH,cA7CK,wBA6CQ;AACT,aAAKX,eAAL,GAAuB,CAAvB;AACAd,WAAGkB,EAAH,CAAMW,eAAN,GAAwB,CAAC7B,GAAG8B,OAAH,CAAWC,KAAZ,GAAoB,CAA5C;AACA/B,WAAGkB,EAAH,CAAMc,oBAAN,GAA6B,EAA7B;AACAhC,WAAGkB,EAAH,CAAMe,aAAN,GAAsB,CAACjC,GAAG8B,OAAH,CAAWC,KAAZ,GAAoB,CAA1C;AACA/B,WAAGkB,EAAH,CAAMgB,kBAAN,GAA2B,CAAC,EAA5B;AACH,KAnDI;;AAoDL;AACAC,mBArDK,6BAqDa;AACd,eAAO,CAAP,EAAU;AACN,gBAAIC,SAASC,KAAKC,MAAL,KAAgB,EAAhB,GAAqB,CAAlC;AACA,gBAAIC,QAAQ,CAAZ;AACA,iBAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAI1B,GAAGkB,EAAH,CAAMsB,IAAN,CAAWC,MAA/B,EAAuCf,GAAvC,EAA4C;AACxC,oBAAI1B,GAAGkB,EAAH,CAAMsB,IAAN,CAAWd,CAAX,KAAiBU,MAArB,EAA6B;AACzBG;AACH;AACJ;AACD,gBAAIA,SAAS,CAAb,EAAgB;AACZvC,mBAAGkB,EAAH,CAAMsB,IAAN,CAAWE,IAAX,CAAgBN,MAAhB;AACA,uBAAOA,MAAP;AACH;AACJ;AACJ,KAnEI;;AAoEL;AACAT,qBArEK,+BAqEe;AAChB,YAAIgB,aAAa,KAAKR,eAAL,EAAjB;AACAnC,WAAGkB,EAAH,CAAM0B,kBAAN,CAAyBF,IAAzB,CAA8BC,aAAa,EAAb,GAAkB,CAAhD;AACA,YAAIE,OAAO7C,GAAG8C,WAAH,CAAe,KAAKlC,UAApB,CAAX;AACAiC,aAAKE,YAAL,CAAkB,MAAlB,EAA0BC,IAA1B,CAA+BL,UAA/B,EAA2C3C,GAAGkB,EAAH,CAAMW,eAAjD,EAAkE7B,GAAGkB,EAAH,CAAMc,oBAAxE;AACAhC,WAAGkB,EAAH,CAAMW,eAAN,IAAyBgB,KAAKd,KAAL,GAAa,CAAtC;AACA/B,WAAGkB,EAAH,CAAMc,oBAAN,IAA8B,CAA9B;AACAhC,WAAGkB,EAAH,CAAM+B,YAAN,CAAmBP,IAAnB,CAAwBG,IAAxB;AACA,YAAI7C,GAAGkB,EAAH,CAAM+B,YAAN,CAAmBR,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,iBAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAI1B,GAAGkB,EAAH,CAAM+B,YAAN,CAAmBR,MAAvC,EAA+Cf,GAA/C,EAAoD;AAChD1B,mBAAGkB,EAAH,CAAM+B,YAAN,CAAmBvB,CAAnB,EAAsBwB,cAAtB,CAAqC,UAArC,EAAiDC,MAAjD,GAA0D,KAA1D;AACH;AACJ;AACD,aAAKzC,QAAL,CAAc0C,QAAd,CAAuBP,IAAvB;AACH,KAnFI;;AAoFL;AACAjB,mBArFK,6BAqFa;AACd,YAAIe,aAAa,KAAKR,eAAL,EAAjB;AACAnC,WAAGkB,EAAH,CAAMmC,gBAAN,CAAuBX,IAAvB,CAA4BC,aAAa,EAAb,GAAkB,CAA9C;AACA,YAAIE,OAAO7C,GAAG8C,WAAH,CAAe,KAAKlC,UAApB,CAAX;AACAiC,aAAKE,YAAL,CAAkB,MAAlB,EAA0BC,IAA1B,CAA+BL,UAA/B,EAA2C3C,GAAGkB,EAAH,CAAMe,aAAjD,EAAgEjC,GAAGkB,EAAH,CAAMgB,kBAAtE;AACAlC,WAAGkB,EAAH,CAAMe,aAAN,IAAuBY,KAAKd,KAAL,GAAa,CAApC;AACA/B,WAAGkB,EAAH,CAAMgB,kBAAN,IAA4B,CAA5B;AACA,aAAKvB,MAAL,CAAYyC,QAAZ,CAAqBP,IAArB;AACA7C,WAAGkB,EAAH,CAAMoC,UAAN,CAAiBZ,IAAjB,CAAsBG,IAAtB;AACH;AA9FI,CAAT","file":"BoardLayer.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\game","sourcesContent":["\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        coin1: cc.Node,\r\n        coin2: cc.Node,\r\n        coin3: cc.Node,\r\n        coin4: cc.Node,\r\n        computer: cc.Node,\r\n        player: cc.Node,\r\n        cardPrefab: cc.Prefab,\r\n        computerCardSum: cc.Integer,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        //cc.vv.computerCard=this;\r\n    },\r\n\r\n    start() {\r\n        cc.vv.creatOtherCard = this;\r\n        //cc.log(cc.vv.creatOtherCard);\r\n        this.hideChip();\r\n        this.initCard();\r\n    },\r\n\r\n    // update (dt) {},\r\n    //隐藏筹码组件\r\n    hideChip() {\r\n        this.coin1.runAction(cc.moveTo(0.4, cc.v2(0, -200)));\r\n        this.coin2.runAction(cc.moveTo(0.3, cc.v2(0, -200)));\r\n        this.coin3.runAction(cc.moveTo(0.2, cc.v2(0, -200)));\r\n        this.coin4.runAction(cc.moveTo(0.1, cc.v2(0, -200)));\r\n    },\r\n    //初始发牌\r\n    initCard() {\r\n        this.initNumber()\r\n        for (let i = 0; i < 2; i++) {\r\n            this.creatComputerCard();\r\n            this.creatPlayerCard();\r\n        }\r\n        //cc.log(cc.vv.computerCardNumber);\r\n        //cc.log(cc.vv.playerCardNumber);\r\n    },\r\n    initNumber() {\r\n        this.computerCardSum = 0;\r\n        cc.vv.computerCardRow = -cc.winSize.width / 4;\r\n        cc.vv.computerCardRotation = 15;\r\n        cc.vv.playerCardRow = -cc.winSize.width / 4;\r\n        cc.vv.playerCardRotation = -15;\r\n    },\r\n    //选牌面\r\n    creatCardNumber() {\r\n        while (1) {\r\n            let number = Math.random() * 52 | 0;\r\n            let count = 0;\r\n            for (let i = 0; i < cc.vv.card.length; i++) {\r\n                if (cc.vv.card[i] == number) {\r\n                    count++;\r\n                }\r\n            }\r\n            if (count == 0) {\r\n                cc.vv.card.push(number);\r\n                return number;\r\n            }\r\n        }\r\n    },\r\n    //生成电脑牌\r\n    creatComputerCard() {\r\n        let cardNumber = this.creatCardNumber();\r\n        cc.vv.computerCardNumber.push(cardNumber % 13 + 1);\r\n        let poke = cc.instantiate(this.cardPrefab);\r\n        poke.getComponent(\"Card\").init(cardNumber, cc.vv.computerCardRow, cc.vv.computerCardRotation);\r\n        cc.vv.computerCardRow += poke.width / 2;\r\n        cc.vv.computerCardRotation -= 5;\r\n        cc.vv.computerCard.push(poke);\r\n        if (cc.vv.computerCard.length > 1) {\r\n            for (let i = 1; i < cc.vv.computerCard.length; i++) {\r\n                cc.vv.computerCard[i].getChildByName(\"cardFace\").active = false;\r\n            }\r\n        }\r\n        this.computer.addChild(poke);\r\n    },\r\n    //生成玩家牌\r\n    creatPlayerCard() {\r\n        let cardNumber = this.creatCardNumber();\r\n        cc.vv.playerCardNumber.push(cardNumber % 13 + 1);\r\n        let poke = cc.instantiate(this.cardPrefab);\r\n        poke.getComponent(\"Card\").init(cardNumber, cc.vv.playerCardRow, cc.vv.playerCardRotation);\r\n        cc.vv.playerCardRow += poke.width / 2;\r\n        cc.vv.playerCardRotation += 5;\r\n        this.player.addChild(poke);\r\n        cc.vv.playerCard.push(poke);\r\n    },\r\n});\r\n"]}